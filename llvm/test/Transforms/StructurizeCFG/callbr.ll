; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=structurizecfg %s -o - | FileCheck %s

; Structurize as usual, but don't tear callbr and its destination blocks apart.

define void @callbr_inline_asm(i32 %c, i1 %d, i1 %e) {
; CHECK-LABEL: define void @callbr_inline_asm(
; CHECK-SAME: i32 [[C:%.*]], i1 [[D:%.*]], i1 [[E:%.*]]) {
; CHECK-NEXT:    [[D_INV:%.*]] = xor i1 [[D]], true
; CHECK-NEXT:    br i1 [[D_INV]], label %[[NOCALLBR:.*]], label %[[FLOW3:.*]]
; CHECK:       [[FLOW3]]:
; CHECK-NEXT:    [[TMP1:%.*]] = phi i1 [ false, %[[FLOW:.*]] ], [ true, [[TMP0:%.*]] ]
; CHECK-NEXT:    br i1 [[TMP1]], label %[[CALLBR:.*]], label %[[RET:.*]]
; CHECK:       [[CALLBR]]:
; CHECK-NEXT:    callbr void asm "", "!i"()
; CHECK-NEXT:            to label %[[INDIRECT:.*]] [label %indirect]
; CHECK:       [[INDIRECT]]:
; CHECK-NEXT:    br i1 [[E]], label %[[FALLTHROUGH1:.*]], label %[[FLOW2:.*]]
; CHECK:       [[FALLTHROUGH1]]:
; CHECK-NEXT:    br label %[[FLOW2]]
; CHECK:       [[INDIRECT2:.*:]]
; CHECK-NEXT:    br i1 [[E]], label %[[INDIRECT1:.*]], label %[[FLOW1:.*]]
; CHECK:       [[INDIRECT1]]:
; CHECK-NEXT:    br label %[[FLOW1]]
; CHECK:       [[NOCALLBR]]:
; CHECK-NEXT:    br i1 [[E]], label %[[NOCALLBR1:.*]], label %[[FLOW]]
; CHECK:       [[NOCALLBR1]]:
; CHECK-NEXT:    br label %[[FLOW]]
; CHECK:       [[FLOW]]:
; CHECK-NEXT:    br label %[[FLOW3]]
; CHECK:       [[FLOW1]]:
; CHECK-NEXT:    br label %[[RET]]
; CHECK:       [[FLOW2]]:
; CHECK-NEXT:    br label %[[RET]]
; CHECK:       [[RET]]:
; CHECK-NEXT:    ret void
;
  br i1 %d, label %callbr, label %nocallbr
callbr:
  callbr void asm "", "!i"() to label %fallthrough [label %indirect]
fallthrough:
  br i1 %e, label %fallthrough1, label %ret
fallthrough1:
  br label %ret
indirect:
  br i1 %e, label %indirect1, label %ret
indirect1:
  br label %ret
nocallbr:
  br i1 %e, label %nocallbr1, label %ret
nocallbr1:
  br label %ret
ret:
  ret void
}
